AWSTemplateFormatVersion: '2010-09-09'
Description: AWSCodePipelineDeployApiGatewaySpringBoot backend with Docker deployment to EC2 (Admin IAM, No S3)

Parameters:
  GitHubOwner:
    Type: String
    Default: NUS-ISS-SUS-Team2
    Description: NUS-ISS-SUS-Team2
  GitHubRepo:
    Type: String
    Default: securidine-backend
    Description: securidine-backend
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to track
  ECRRepositoryName:
    Type: String
    Default: nus-iss-sus-team2/securidine
    Description: Name of the Amazon ECR repository [nus-iss-sus-team2/securidine]
  InstanceType:
    Description: "EC2 instance type"
    Type: String
    Default: "t2.micro"
  SSLCertificateArn:
    Type: String
    Description: "Copy the ARN of the existing ACM certificate for HTTPS [arn:aws:acm:ap-southeast-1:302125150179:certificate/827f2781-1eac-43e0-9162-ff9585564255]"
  KeyName:
    Description: "EC2 KeyPair for SSH access"
    Type: AWS::EC2::KeyPair::KeyName
  VPC:
    Description: "VPC ID where the instance will be deployed"
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: "Subnet ID for EC2 instance"
    Type: AWS::EC2::Subnet::Id
  SubnetALB:
    Description: "Second Subnet IDs for ALB (Requires more than one - Choose a different one)"
    Type: AWS::EC2::Subnet::Id

Resources:
  OrderServiceEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: "ami-0995922d49dc9a17d"  # Replace with latest Amazon Linux 2 AMI ID
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: "Order Microservice"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /var/log/user-data.log 2>&1

          echo "Updating packages..."
          yum update -y

          echo "Installing dependencies..."
          yum install -y docker
          yum install -y ruby wget


          echo "Starting and enabling Docker..."
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user

          echo "Installing AWS CodeDeploy agent..."
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          echo "Enabling and starting CodeDeploy agent..."
          systemctl enable codedeploy-agent
          systemctl start codedeploy-agent

          echo "Verifying Docker and CodeDeploy installations..."
          docker --version || exit 1
          systemctl status codedeploy-agent || exit 1

          echo "User Data script completed."

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow inbound access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: AdminAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2InstanceRole
        
  OrderServiceALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "OrderServiceALB"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref Subnet 
        - !Ref SubnetALB
      SecurityGroups:
        - !Ref EC2SecurityGroup

  OrderServiceALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref OrderServiceALB
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OrderServiceTargetGroup

  OrderServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref OrderServiceEC2Instance

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "nusiss-sus-project.online"  # Replace with your domain
      ValidationMethod: DNS  # Use DNS validation for ACM certificate     
        
  OrderServiceApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "OrderServiceAPI"
      Description: "API for Order Service"
  
  OrderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref OrderServiceApi
      ParentId: !GetAtt OrderServiceApi.RootResourceId
      PathPart: "orders"

  GetOrdersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrderServiceApi
      ResourceId: !Ref OrderResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Join ["", ["https://", !GetAtt OrderServiceALB.DNSName, "/orders"]]
        IntegrationResponses:
          - StatusCode: "200"
      MethodResponses:
        - StatusCode: "200"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - GetOrdersMethod
    Properties:
      RestApiId: !Ref OrderServiceApi
      StageName: prod      
        
        
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: securidines3bucket
      VersioningConfiguration:
        Status: Enabled

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AdminAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: SpringBootDockerBuild
      Source:
        Type: GITHUB
        Location: !Sub "https://github.com/${GitHubOwner}/${GitHubRepo}.git"
        BuildSpec: Order-Service/buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub "${ECRRepository.RepositoryUri}"
          - Name: JAVA_HOME
            Value: "/usr/lib/jvm/java-17-openjdk"
      ServiceRole: !GetAtt CodePipelineRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 15

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: SpringBootDockerPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub "{{resolve:secretsmanager:GitHubTokenBZ:SecretString:GitHubOAuthToken}}"
              OutputArtifacts:
                - Name: SourceArtifact

        - Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput

        - Name: Deploy
          Actions:
            - Name: DeployToEC2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: SpringBootApp
                DeploymentGroupName: SpringBootDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: SpringBootApp

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: SpringBootDeploymentGroup
      ServiceRoleArn: !GetAtt CodePipelineRole.Arn
      Ec2TagFilters:
        - Key: Name
          Value: Order Microservice
          Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

Outputs:
  PipelineName:
    Description: Name of the AWS CodePipeline
    Value: !Ref CodePipeline
